;; (print (get-universal-time))

(defun timedPrimeTest (n) 
    (print n)
    (print (get-universal-time))
    (startPrimeTest n (get-universal-time))
    (print (get-universal-time))
    )

(defun startPrimeTest (n startTime)
    (if (primeTest n)
        (reportPrime (- startTime (get-universal-time)))))
(defun reportPrime (consttime)
    (print "***")
    (print consttime)    
)
(defun square (x) (* x x))
(defun isRem(n x) (= (rem n x) 0))
(defun findDivisor (n index)
    (print index)
(cond 
   ( (> (square index) n) n)
   ((isRem n index) index)
   (t (findDivisor n (+ index 1)))
)
)
(defun findDivisor2 (n index)
    (print n)
(cond 
   ( (> (square index) n) n)
   ((isRem n index) index)
   (t (findDivisor n (next index)))
)
)
(defun next (n) 
    (if (= n 2) 3 (+ n 2)))
;; (print (findDivisor 199 2)) 
;; (print (findDivisor 1999 2)) 
;; (print (findDivisor 19999 2)) 
(defun prime (n) (= (findDivisor n 2) n))
;; (print (prime 5))
(defun primeTest (n) 
    (if (prime n) T (primeTest (+ n 1))))

(print (timedPrimeTest 9968))