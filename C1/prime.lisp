(defun square (x) (* x x))
(defun isRem(n x) (= (rem n x) 0))
(defun findDivisor (n index)
(cond 
   ( (> (square index) n) n)
   ((isRem n index) index)
   (t (findDivisor n (+ index 1)))
)
)
(print (findDivisor 199 2)) 
(print (findDivisor 1999 2)) 
(print (findDivisor 19999 2)) 
(defun prime (n) (= (findDivisor n 2) n))
;; (print (prime 5))

(defun even? (n) (= (rem n 2) 0))
(defun try (n) 
    (defun tryit (index)
        (= (exped index n n) index))
   (tryit (+ (random (- n 1)) 1))
)
(defun fast (b n) 
    (cond ((= n 0) 1)
        ((even? n) (square (fast b (/ n 2))))
        (t (* b (fast b (- n 1))))
        )
        )
(defun fastPrime (n times) 
(cond 
    ((= times 0) T)
    ((try n) (fastPrime n (- times 1)))
    (t Nil)
)
)

(defun exped (base exp n)
    (rem (fast base exp) n)
)
(print (fastPrime 11 10))