(define (timePrimeTest n) 
    (newline)
    (display n)
    (startPrimeTest n (real-time-clock)))
(define (startPrimeTest n startTime)
    (if (prime n) (reportPrime (- (real-time-clock) startTime))))
(define (reportPrime cosntTime)
    (display " *** ")
    (display cosntTime))
(define (smallestDivisor n) (findDivisor n 2))
(define (square n) (* n n))
(define (findDivisor n testDivisor)
    (cond ((> (square testDivisor) n) n)
        ((divisor testDivisor n) testDivisor)
        (else (findDivisor n (+ testDivisor 1)))
        ) )
(define (divisor a b) ( = (remainder b a) 0))
(define (prime n ) (= n (smallestDivisor n)))
(define (nextOdd n) (if (= (remainder n 2) 0) (+ n 1) (+ n 2)))
(define (continuePrimes n count)
    (cond 
    ((= count 0) (display "ara primes"))
    ((prime n)
    (newline)
    (display n)
    (continuePrimes (+ n 1) (- count 1)) )
    (else (continuePrimes (+ n 1) count))
    ))
(define (constTime n)
    (let ((startTime (real-time-clock)))
    (display "startconsttime")
    (continuePrimes n 3)
    (- (real-time-clock) startTime)))
(display 9)