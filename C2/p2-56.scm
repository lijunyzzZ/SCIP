(load "100")
(define (exponentiation? s)
    (and (pair? s) (eq (car s) '^))
)
(define (base e)
    (cadr e)
)
(define (expnont e)
(caddr e)
)
(define (make-exponentiation base n)
    (cond ((= n 0) 1)
        ((= n 1) base)
        (else (list '^ base n))
    )
)
(define (dervi-expnont e)
    (let ((base1 (base e)
           (expnont1 (expnont e)))
    (cond ((not(variable? base1) 0) )
        ((= expnont1 0) 0)
        ((= expnont1 1) (base1))
        (else (make-product expnont1 (make-exponentiation base1 (- expnont1 1))))
    )))
)