(define (accumulate op innitial seq)
    (if (null? seq) innitial
    (op (car seq ) (accumulate op innitial (cdr seq)))
    )
)
(define (dot-product v w)
(accumulate + 0 (map * v w))
)
(load "p2-36")
(define v (list 1 2 3))
(define w (list 4 5 6))
(define m (list (list 1 2 3)(list 4 5 6)(list 7 8 9)))
(define (mv m v )
    (map (lambda (s) (accumulate + 0 (map * v s))) m)
)

(define (t mat)
    (accumulate-n cons '() mat)
)
(define (mm m n)
(let ((cols (t n))
)
    (map (lambda (s) (mv cols s)) m)
))