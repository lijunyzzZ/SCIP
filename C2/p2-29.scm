(define (make-mobile left right)
    (list left right)
)
(define (left-branch tree)
    (car tree)
 )
 (define (right-branch tree)
    (cadr tree)
 )
 (define (make-branch length structure)
    (list length structure)
 )
(define (branch-length branch)
    (car branch)
)
(define (branch-structure branch)
    (cadr branch)
)
(define (total-weight tree)
    (define (weight s)
        (if(pair? (branch-structure s))
         (+ (weight (left-branch (branch-structure s))) (weight (right-branch (branch-structure s))))
         (branch-structure s)
         ))
    (+ (weight (left-branch tree)) (weight (right-branch tree)))
    )
(define (torque branch)(
    (* (branch-length branch) (total-weight (branch-length branch)))
))
; 一个二插活动体是否平衡，如果他左边和右边都是重量，那么判断重量和力矩就行了，如果他有左右子树，不仅仅要判断左右子树，还要判断本身的力矩
(define (isbalance branch)
    (let (
        (s (branch-structure branch))
        (len (branch-length branch))
    )
    (if (pair? s)
       (and  (and (isbalance (left-branch s)) (isbalance (right-branch))) (= (torque (left-branch s)) (torque (right-branch s))) )
       #t
    )
    )
)
(define (isTreeBalance tree)
    (and (isbalance (left-branch tree)) (isbalance (right-branch tree)))
)