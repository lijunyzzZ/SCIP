(define one (list 1 2 3 4))
(define (list-ref items n)
    (if (= n 0) (car items) (list-ref (cdr items) (- n 1)))
)
(define (length items) 
    (define (length-iter a count)
        (if (null? a) count (length-iter (cdr a) (+ count 1)))
    )
    (length-iter items 0)
)
(define (last-pair items)
    (list-ref items (- (length items) 1))
)
; 翻转一个链表。
(define (reverse items) 
    (define (iter list res)
        (if (null? list) res (iter (cdr list) (cons (car list) res)))
    )
    (iter items '())
    )