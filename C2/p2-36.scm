(define (carlist ls)
    (accumulate (lambda (x1 y1) (cons (car x1) y1))  '() ls)
)
(define (cdrlist ls)
(accumulate (lambda (x1 y1) (cons (cdr x1) y1))  '() ls)
)
(define (accumulate op innitial seq)
    (if (null? seq) innitial
    (op (car seq ) (accumulate op innitial (cdr seq)))
    )
)
(define (accumulate-n op init seqs)
    (if (null? (car seqs) ) '()
        (cons (accumulate op init (carlist seqs))
            (accumulate-n op init (cdrlist seqs))
        )
    )
)
(define a (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))