(define (makecodetree left right)
    (list left right (append (symbols left) (symbols right)) (+ (weight left) (weight right)))
)
(define (makeleaf symbol weight)
    (list 'leaf symbol weight)
)
(define (leaf? object)
    (eq? (car object) 'leaf)
)
(define (symbolleaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols tree)
    (if (leaf? tree) (list (symbolleaf tree))
    (caddr tree))
)
(define (weight tree)
    (if (leaf? tree)
        (weight-leaf tree)
        (cadddr tree)
    )
)
(define (decode bits tree)
    (define (decode1 bits current-branch)
        (if (null? bits)
            '()
            (let ((next-branch (choose-branch (car bits) current-branch)))
                (if (leaf? next-branch)
                    (cons (symbolleaf next-branch)
                        (decode1 (cdr bits) tree)
                    )
                    (decode1 (cdr bits) next-branch)
                )
            )
        )
    )
    (decode1 bits tree)
)
(define (choose-branch bit branch)
    (cond ((= bit 0)(left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "aaa"))
    )
)
(define sampletree
    (makecodetree (makeleaf 'A 4)
        (makecodetree (makeleaf 'B 2)
            (makecodetree (makeleaf 'C 1) (makeleaf 'D 1))
        )
    )
 )
 (define mes '(0 1 1 0 0 1 0 1 0 1 1 1 0))
 ;Value 7: (a c a b b d a)