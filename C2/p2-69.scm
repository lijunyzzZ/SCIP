(load "p2-68")
(define (adjoinset x set)
    (cond ((null? set) (list x))
    
    ((< (weight x) (weight (car set))) (cons x set))
    (else (cons (car set) (adjoinset x (cdr set))))
    )
)
(define (makeleafset pairs)
    (if (null? pairs) 
        '()
        (let ((pair (car pairs)))
            (adjoinset (makeleaf (car pair) (cadr pair))
                    (makeleafset (cdr pairs))))
        )
    )
(define (generatehuffmantree pairs)
    (successsivemerge (makeleafset pairs))
)
(define pairs1 (list (list 'A 4) (list 'B 2) (list 'C 1) (list 'D 1)))
(define leafs (makeleafset pairs1));降序排列
(define (sortset l)
    (sort l (lambda (x y)
        (let ((weightx (weight x))
            (weighty (weight y))
        )
        (< weightx weighty)
        )   
    ) )
)
(define sortedlist1 (sortset leafs))
(define (successsivemerge leaflist)
    (let ((sortedlist (sortset leaflist)))
   (cond ((null? sortedlist) '())
       ( (= 1 (length sortedlist))  (car sortedlist))
        (else 
            ; (car leaflist)
            ; (display newline)
            ; (display "1")
            (successsivemerge (cons (makecodetree (car sortedlist) (cadr sortedlist)) (cddr sortedlist)))
        )
   ))
)


; (successsivemerge (cons (makecodetree (car sortedlist1) (cadr sortedlist1)) (cddr sortedlist1)))