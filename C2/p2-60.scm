(define (element-of-set? x set)
    (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))
    )
)
(define (adjoin-set x set)
    (cons x set)
)
(define (interaction-set set1 set2)
    (cond ((or (null? set1) (null? set2)) '())
    (
        (element-of-set? (car set1) set2)
        (cons (car set1) (interaction-set (cdr set1) set2))
    )
    (else (interaction-set (cdr set1) set2))
    )
)
(define (union-set set1 set2)
    (cond ((and (null? set1) (null? set2) ) '())
    ((null? set1) set2)
    ((null? set2) set1)
    (else (union-set (cdr set1) (adjoin (car set1) set2)))
    )
)
;elementofset一样实现，add会更加简单 但是要提供一个addofunique也就是重复的时候就不加了 取交集和并集的时候需要使用
;合适的时候需要list 在需要重复元素使用场景的时候，例如前面的字符串求导。